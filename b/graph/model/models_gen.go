// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type PostInterface1 interface {
	IsPostInterface1()
	GetAwards() []*Award
	GetName() *string
}

type PostInterface2 interface {
	IsPostInterface2()
	GetAwards() []*Award
	GetID() string
}

type Award struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type CompactPost struct {
	Awards []*Award `json:"awards,omitempty"`
	Name   *string  `json:"name,omitempty"`
	ID     string   `json:"id"`
}

func (CompactPost) IsPostInterface1() {}
func (this CompactPost) GetAwards() []*Award {
	if this.Awards == nil {
		return nil
	}
	interfaceSlice := make([]*Award, 0, len(this.Awards))
	for _, concrete := range this.Awards {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this CompactPost) GetName() *string { return this.Name }

func (CompactPost) IsPostInterface2() {}

func (this CompactPost) GetID() string { return this.ID }

type Query struct {
}
